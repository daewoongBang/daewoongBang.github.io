{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/react/react-event-handling","result":{"data":{"markdownRemark":{"id":"6b0f4fca-7731-5b68-9d34-141a60fcc18b","html":"<p>사용자가 웹 브라우저에서 DOM 요소들과 상호 작용하는 것을 <strong>Event</strong> 라고 한다. 예를 들어 버튼을 클릭했을 때는 <code class=\"language-text\">onclick</code> 이벤트를 실행하고 Form 요소는 값이 바뀔 때 <code class=\"language-text\">onchange</code> 이벤트를 실행한다.</p>\n<p>React에서 Event를 처리하는 방식은 HTML DOM Element에서 Event를 처리하는 방식과 매우 비슷하지만 몇 가지 문법적인 차이가 있다.</p>\n<p>아래 코드를 보면,</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Say</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>message<span class=\"token punctuation\">,</span> setMessage<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onClickEnter</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setMessage</span><span class=\"token punctuation\">(</span><span class=\"token string\">'HI!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onClickLeave</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setMessage</span><span class=\"token punctuation\">(</span><span class=\"token string\">'BYE!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>onClickEnter<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>입장<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>onClickLeave<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>퇴장<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>message<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>React의 이벤트는 소문자 대신 <em><strong>camelCase를 사용한다</strong></em>.<br>\n( onclick -> <code class=\"language-text\">onClick</code> )</li>\n<li>JSX를 사용하여 문자열이 아닌 <em><strong>함수로 Event Handler를 전달한다</strong></em>.<br>\n( <code class=\"language-text\">onClick={onClickLeave}</code> )</li>\n<li>false를 반환해도 event의 기본 동작을 방지할 수 없다. <em><strong>반드시 <code class=\"language-text\">preventDefault</code>를 명시적으로 호출해야 한다</strong></em>.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">ActionLink</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleClick</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">e</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// e 객체는 합성 이벤트(SyntheticEvent)로 웹 브라우저의 네이티브 이벤트를 감싸는 객체</span>\n    <span class=\"token comment\">// 네이티브 이벤트와 인터페이스가 같으므로 순수 자바스크립트 HTML Event를 다룰 때와 똑같이 사용 가능하다.</span>\n    e<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 기본 동작 방지</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'The link was clicked.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>a href<span class=\"token operator\">=</span><span class=\"token string\">\"#\"</span> onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleClick<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n      Click me\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>a<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li><em><strong>DOM 요소에만 이벤트를 설정할 수 있다</strong></em>. div, button, input, form, span 등의 DOM 요소에는 이벤트를 설정할 수 있지만, 우리가 직접 만든 컴포넌트에는 이벤트를 자체적으로 설정할 수 없다.</li>\n</ul>\n<hr>\n<p>참고: 리액트 공식 문서</p>\n<ul>\n<li>이벤트 처리하기<br>\n<a href=\"https://ko.reactjs.org/docs/handling-events.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://ko.reactjs.org/docs/handling-events.html</a></li>\n<li>합성 이벤트(SyntheticEvent)<br>\n<a href=\"https://ko.reactjs.org/docs/events.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://ko.reactjs.org/docs/events.html</a></li>\n</ul>","fields":{"slug":"/posts/react/react-event-handling","tagSlugs":["/tag/react/","/tag/event-handling/"]},"frontmatter":{"date":"2020-01-23 11:16:00","description":"React Event 처리하기","tags":["React","Event Handling"],"title":"React Event Handling","socialImage":""}}},"pageContext":{"slug":"/posts/react/react-event-handling"}}}