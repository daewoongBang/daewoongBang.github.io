{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/react/react-virtual-dom","result":{"data":{"markdownRemark":{"id":"b65c977e-8c0e-5261-bec3-3f78b23645d6","html":"<hr>\n<blockquote>\n<p>We build React to solve one problem:<br>\nbuilding large applications with data that<br>\nchanges over time.</p>\n</blockquote>\n<blockquote>\n<p>우리는 지속해서 데이터가 변화하는<br>\n대규모 애플리케이션을 구축하기 위해 리액트를 만들었다.</p>\n</blockquote>\n<hr>\n<p>리액트의 주요 특징 중 하나는 <code class=\"language-text\">Virtual DOM</code>을 사용하는 것이다.<br>\n그렇다면 <code class=\"language-text\">Virtual DOM</code>이란 뭘까?<br>\n<code class=\"language-text\">Virtual DOM</code>을 얘기하기 전에 먼저 <code class=\"language-text\">DOM</code>이 무엇인지에 대해서 알아야 한다.</p>\n<p><code class=\"language-text\">DOM</code>이란 <code class=\"language-text\">Document Object Model</code>의 약어로서, HTML 문서의 요소를 제어하기 위해 웹 브라우저에 처음 지원되었다.<br>\n<code class=\"language-text\">DOM</code>은 XML이나 HTML 문서에 접근하기 위한 일종의 인터페이스로 문서의 내용, 구조, 스타일에 접근하고 변경하는 수단이며 트리형태로 되어있어 특정 노드를 찾거나 수정하거나 제거하거나 원하는 곳에 삽입할 수 있다.</p>\n<p>DOM API를 수많은 플랫폼과 웹 브라우저에서 사용하는데 이 DOM에는 한 가지 문제점이 있다. 예를 들어 요즘 흔히 접하는 대규모의 애플리케이션의 경우 스크롤을 내릴수록 수많은 데이터가 로딩이 되는데 이 때 각 데이터를 표현하는 요소가 많아질수록 DOM에 직접 접근하여 변화를 주다 보면 속도가 느려지는 등의 성능 이슈가 발생하기 시작한다.</p>\n<p>DOM 자체의 성능은 빠르다.<br>\n하지만 웹 브라우저 단에서 DOM에 변화가 일어나면 웹 브라우저가 CSS를 다시 연산하고, 레이아웃을 다시 구성하고 페이지를 리페인트하게 된다.<br>\n즉, 이 과정에서 DOM을 조작할 때마다 엔진이 웹 페이지를 새로 그리기 때문에 업데이트가 너무 잦으면 성능이 저하될 수밖에 없다.<br>\n이를 해결하려면 DOM을 최소한으로 조작하여 작업을 처리하는 방식으로 개선을 해야한다.<br>\n이를 해결하기 위해 <strong>React</strong>는 <code class=\"language-text\">Virtual DOM</code> 방식을 사용하여 DOM 업데이트를 추상화함으로써 DOM 처리 횟수를 최소화하였다.</p>\n<h3 id=\"virtual-dom\" style=\"position:relative;\"><a href=\"#virtual-dom\" aria-label=\"virtual dom permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Virtual DOM</h3>\n<p><code class=\"language-text\">Virtual DOM</code>을 사용하면 데이터에 변화가 생길 경우 웹 브라우저의 실제 DOM에 접근하여 조작하는 대신, 가상 DOM에 업데이트 한다.<br>\nReact에서 데이터가 변하여 실제 DOM을 업데이트할 경우 절차는 다음과 같다.</p>\n<ol>\n<li>데이터가 업데이트되면 전체 UI를 Virtual DOM에 리렌더링한다.</li>\n<li>이전 Virtual DOM에 있던 내용과 현재 내용을 비교한다.</li>\n<li>바뀐 부분만 실제 DOM에 적용한다.</li>\n</ol>\n<hr>\n<p>참고</p>\n<ul>\n<li>react and the virtual dom 에 관한 짧은 영상 (한글자막 제공)<br>\n<a href=\"https://www.youtube.com/watch?v=muc2ZF0QIO4&#x26;feature=youtu.be\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.youtube.com/watch?v=muc2ZF0QIO4&#x26;feature=youtu.be</a></li>\n</ul>","fields":{"slug":"/posts/react/react-virtual-dom","tagSlugs":["/tag/react/","/tag/dom/","/tag/virtual-dom/"]},"frontmatter":{"date":"2020-01-20 14:18:00","description":"DOM의 기본 개념과 React에서의 Virtual DOM의 이해","tags":["React","DOM","Virtual DOM"],"title":"Virtual DOM 이란?","socialImage":""}}},"pageContext":{"slug":"/posts/react/react-virtual-dom"}}}